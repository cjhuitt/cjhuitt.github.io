[{"categories":null,"content":"Jury Duty I was recently on a jury for the first time, and while they’ve definitely got it down to a process, there were some things I didn’t know going into it that knowing about might have prevented a touch of anxiety around the whole process. So I’m going to go through some of the steps as I experienced them, in case it helps anyone else 1.\nSelection and Reporting for Duty The start is the process that the most people will be familiar with:- Get a postcard in the mail- Fill out a survey online- Call in on certain times to see if you must report\nI’ve only had to go to the courthouse once before, in the olden days before I even had a cellphone. One benefit since then is the option to give a mobile number in the survey, and rather than calling for reporting information, they can text it to you.\nSince I had to report, I needed to show up at the designated courthouse before a certain time (8:30 for me). I was directed into a courtroom with about 40-50 others, where we waited for everyone to arrive and for the judge to appear. The lawyers (both sides) were already present and reviewing documents inside the courtroom.\nJury Bank The list of people in the jury pool had been ordered somehow (most likely randomized). Once the judge took the stand, they read 24 names to leave the general seating area of the courtroom and sit in the jury portion (with extra chairs placed to accommodate the number).\nThe lawyers both get an opportunity to give some information and then ask questions of the jurors — first the plaintiffs, then the defense. During this time some people may be dismissed for various causes (one of the lawyers will ask the judge; the other gets a chance to object, then the judge makes the call). Causes can range from scheduling problems (they estimate the time the trial will take and ask about scheduling conflicts — one person had a surgery scheduled two days out) to knowing anyone involved, to having been involved in a similar case previously, to knowing others on the pool who might influence your decision-making ability (such as a boss and subordinate serving together).\nWhenever anyone was dismissed for cause during this portion, another name was read from the list and they were replaced. They were then asked if any previous questions to the smaller group applied to them. This process repeated until there were still 24 potential jurors who had passed all of the questioning so far.\nFinally each party was able to strike 5 of the people from the smaller pool, bringing the number of jurors for the case down to 14 (12 plus two alternates). At this point any remaining people from the larger pool were also dismissed, and the jury was selected.\nNote-taking and Communication We weren’t immediately informed about this, but the courthouse provided pads of paper and pencils for taking notes during the trial — after the opening statements, which aren’t part of the actual evidence and so weren’t supposed to be used for notes. I had wondered about needing notes, but was waiting for a break to ask the courtroom secretary (the official contact person for the jury), but found out before I needed to ask.\nThe jurors are explicitly asked not to talk about the case with anyone, including each other, so as to not bias the information learned through the actual trial. We were also (obviously) asked not to try and do any searches for information about the case until the trial was over.\nCell phones for the jury were supposed to be off and we were asked to leave them in the room set aside for juror’s breaks and deliberations rather than carry them into the courtroom. (In this case, they waited until after jury selection and for our first break in the trial before informing us to leave them before coming back in).\nThe notes were supposed to stay in the courthouse; either in-hand in the courtroom or left in the juror’s room between days. Also somewhat obviously, we weren’t supposed to read each other’s notes.\nWe were also asked to leave the notepads behind during the closing arguments and the jury instructions.\nInstructions and Deliberation Over and over during the process, it re-emphasized how formal and process-oriented everything is. Apparently that includes jury instructions, which are written down (and read to the jury), but apparently involve the lawyers from both sides; either for feedback or approval, I don’t know. Since I was in the jury, I didn’t get to see that part of the process.\nThe jury instructions included, among other things, the actual elements required to be true for each charge in order for the defendant to be found guilty. It also included a form per charge to be filled out and signed by all jurors.\nThe jury instructions also included the process for having any other questions answered, and it’s involved — write the question, have the court secretary deliver it to the judge, the judge would convene the lawyers (at least, maybe the defendant also?) and deliberate the answer, and might return a written answer to the jury. Both written question and answer would then need to be returned with the evidence and verdict forms to become part of the record of the trial.\nDuring the deliberation, the court secretary removed all of our electronic devices; cell phones, smart watches, a backpack with a computer one of the jurors had brought along. They instructed us to only use the information presented in the trial, but they also tried to ensure that would be the case.\nThere were minimal instructions given for the process of arriving at a verdict; choose a foreperson, discuss, and the verdict must be unanimous — that’s it. While there were more instructions on what certain terms of the charges meant per state law, I suspect the lack of how for the jury is intentional, so that may add some ambiguity. The foreperson is mentioned as helping guide the discussion to a result, so hopefully they (or someone in the jury) have some meeting facilitation experience.\nOne item I didn’t expect: the transcript of the witness testimony wasn’t made available to us in the jury. If I had known that, I would have taken better notes throughout the actual trial. (In this particular case I don’t think it mattered, because the case mostly hinged on the credibility of one particular witness, and other details only affected the periphery.)\nOnce the verdict was reached and we were about to return to the courtroom for it to be delivered, all of our notes were gathered together to be destroyed by the court secretary.\nMiscellany At the last minute I left my travel mug of tea in the car rather than take it in, and was happy I’d done so as the courtroom only allowed water.\nDressing in layers is probably useful; I found the courtroom chilly for most of the trial (in winter), but also inadvertently ended up sitting in the jury box right beside the (large) air vent for the courtroom.\nThe website about jury duty had a description of the dress code; fortunately this wasn’t difficult for me to handle.\nPaying close attention to testimony for an entire day can be draining in a different way than my usual work.\nNo guarantee about other locations but inside Iowa shoudl be similar. ↩︎\n","description":"","tags":null,"title":"Jury Duty Overview","uri":"/posts/jury_duty_overview/"},{"categories":["Writing"],"content":"Just two days ago I returned from the Writing Excuses’ 2024 Mexican Riviera retreat. During the cruise, multiple times I ended up answering the question of what brings me to them, and thought it was interesting how my answer has changed over the years.\nRelevant Background While I had some writing instruction in grade school and took a couple writing classes in college, most of what I’ve learned about writing has come after those.\nI was an early listener to the Writing Excuses podcast1, and through the podcast learned about various opportunities for classes. One was an online short story class taught by Mary Robinette Kowal, during which I rediscovered how useful some instruction time can be. When I learned that the Writing Excuses instructors were doing their retreat, I set an alarm to get up very early and managed to get a ticket for that retreat.\nThe retreat was great, and I learned a lot, got some solid writing time (mostly plotting that particular retreat), and met some great people, some of whom became my first non-local writing and critique group3. That year they also previewed to the local attendees that the following year the retreat would be on a cruise ship rather than local4.\nI did little over the next few years, but then in 2019 decided to try the cruise thing… and discovered that I liked it. So I returned in subsequent years. I also attended their Minnesota retreat this year.\nWhat I Get I went to my first retreat for the instruction — yes, the dedicated writing time was a bonus, but I was looking primarily to learn things.\nI was looking for something similar for my first cruise — and I got it, though things had changed significantly since the retreat I’d previously been on. There were for sure more people, and a cruise ship isn’t exactly an introvert’s delight… but also, the Writing Excuses cast and associated staff had learned and adapted through the years to make the process smoother as well, and to emphasize different aspects than just the instruction and writing time5. They mentioned that taking time for self-care was important.\nThe also claimed that even more than the instruction or the writing time, they’d learned that the community and connections we’d make during the retreat was probably the most valuable part of the cruise.\nI’m an introvert, and the thought of talking to all these people I didn’t know6 was more than slightly overwhelming. This wasn’t helped by sit-down dinner nights where each night I sat with an almost entirely different group of attendees and tried to keep up with the pleasant conversation. Nonetheless, I did learn a few names that first year, and more over the following years as some other attendees also returned.\nOver the years, however, the host’s assertion about the community have come true.\nWhile I still appreciate the classes, and usually get at least one good nugget from every one I attend, what brings me back has changed from the instruction to the other people. I even look forward to the dinners with random other attendees… though many of them are no longer random but friends I haven’t otherwise seen in a year or more.\nPlus, a week of nice weather and pools + hot tubs and buffets to surround all of the above helps.\nWhile the land-based retreats Writing Excuses has returned to are perhaps better for my writing (I wrote nearly double the amount of fiction words, though at a different and easier point in my current WIP), it doesn’t quite match the joy of returning to my tribe once more.\nAs a momento, I still have the CD they released with the episodes from seasons 1-3 on it2 ↩︎\nBack in those days, you didn’t just keep old podcast files laying around on your hard drive — those things take up space! ↩︎\nFor every thing, there is a season, and that group’s season has passed. Most of the group stopped writing for various life-related reasons. ↩︎\nFor many good reasons, including the fact that cruise ships include both food and shelter for the price, are not significantly more expensive than hosting a conference on land, and could accommodate many more people than one instructor’s parent’s house, even if that was graciously volunteered and the family seemed happy to host. ↩︎\nThey continue to improve (as does the host cruise line, Royal Caribbean), and I feel like this year was one of the smoothest yet, despite the staff being thrown for a loop by a last-minute change to dinner table assignments discovered on the first day. ↩︎\nFor my first retreat, I didn’t know anyone, but there were only ~30 people plus the hosts, and I at least knew their voices. I think the first cruise I attended had 70 and maybe 100 attendees I’d never met, and again, I only knew the podcast hosts. I did at least know my spouse, who went along with me on the first cruise. ↩︎\n","description":"","tags":["writing","conferences","education"],"title":"Why I attend WXR Retreats","uri":"/posts/wxr_cruise_2024/"},{"categories":["reactions"],"content":"Enough decades ago that I’d rather not get into specific numbers, I was delighted to learn that some of my favorite movies — the Star Wars trilogy — also had books! That continued the story!\nAnd thus I was introduced to the Star Wars Expanded Universe (before they even used the term “Expanded Universe”, and now Legacy). I started, as many people do, with Timothy Zahn’s Heir to the Empire and was introduced to Thrawn and Mara Jade. The trilogy was awesome, just like what I wanted out of the movies, and cemented my desire to read more.\nThe rest of the books… well, there were definitely some gems. There were a bunch of perfectly adequate stories, and then there were some others (like Splinter of the Mind’s Eye, which to be fair was written before The Empire Strikes Back had even come out, which partly explains why it leaned harder on the Luke/Leia romance than was entirely comfortable when reading it many years later).\nI don’t regret reading them — they helped pass a lot of my high school and early college time — but the quality was quite variable.\nThe current universe of Star Wars movies and streaming series, made to be the new Expanded Universe after demoting the previous books to Legacy status, appears to be achieving that exact same standard of quality — a few great ones, a good chunk of interesting and competent writing, and a few that leave you scratching your head and wondering what even happened.\n(The Acolyte spoilers beyond)\nThe Acolyte was not a great show. Despite some of my complaints, it was reasonably entertaining as well. So I guess it’s slotted into the broad adequate category by default.\nWhat I liked: Most of the martial fight scenes. This starts right off the bad with Mae fighting (Carrie Anne Moss), which is well choreographed, but in my opinion hits a peak when Sol first fights Mae, and then when Qimir is fighting many Jedi in the forest Having the Jedi screw things up. I didn’t realize how much I wanted to see some of the flaws in the Jedi system until this show, and it did well making me like (most of) the non Jedi while not liking (most of) the actual Jedi. Especially the four primary Jedi involved in The Incident (though admittedly Kelnacca was never that involved in it) Yord Fandar and Jecki Lon as Jedi-in-training who didn’t deserve the ends they found Showing the same scene from multiple points of view. It was audacious, and I think it mostly worked whenever they did it Osha’s character arc (well, mostly) Adding some mysterious elements back (fans of previous shows know about Vergences, I guess, but what exactly they can do is still more of a mystery) Despite being worried I wouldn’t see him separate from Jason in The Good Place, Manny Jacinto as Qimir stood distinct from the beginning What I disliked: Characters appear to have one motivation, then do something else because (as far as I can tell) “the plot needs them to do X, so they do.” I’m sure there are reasonable explanations and motivations for most or all of them — I can even come up with some myself — but what was actually shown always left me wondering what the writers thought the motivations were Force abilities coming and going, apparently also just because the plot needed it. This could potentially be hand-waved away a bit, but again, it wasn’t covered in the actual show The overall inability of Jedi to act sensibly. Apparently no attachment or emotions also means no self-preservation and a distinct lack of sense? To quote myself from a different medium:\nIf the level of training for the Jedi Knights we saw at the end until the movies began, I’m surprised the Jedi survived more than a month in the separatists/clone-wars saga…\nVernastra: Establish a perimeter 5k out, keep them contained\nJedi Knights: Immediately chase after people in a giant clump, ignoring anything sort of containment\n(not to mention the ships with scanners they could have sent 1-2 Jedi Knights after)\nWhat I’m torn on: The lightsaber-whip. It’s totally cool, and visually appealing, but completely opposite everything else in every film about light_sabers_. It doesn’t fill any crucial role in this series so I’m mostly just letting it slide, but still… Callouts On what could be done with more show time:\n[T]hey need to get on board with longer seasons again. This pacing is deadly for storytelling. There’s no time to do anything interesting!\nEmmet Asher-Perrin on Reactor\nOn making fun of some of the sillier parts of the series:\nIf there is no miscommunication in this show, then there is no show.\nOh, interesting story-telling technique.\nPitch Meeting\n","description":"","tags":["star wars"],"title":"Quick Thoughts: Star Wars Acolyte (Season 1)","uri":"/posts/star_wars_acolyte/"},{"categories":["Work History"],"content":"A recent discussion on a chat server about mistakes and what people learned from them reminded me of one of my worst (most potentially catastrophic) defects. This is from nearly two decades ago, so the exact details are fuzzy, but I definitely remember the key elements.\nThe Software This particular app was a GUI for data analysis, made by the same company that made the analyzer app (which was a command-line app that could take days to run). It dealt with large amounts of data (or it felt that way at the time), and let the user view a rendering of the data from different angles.\nOver time, the software developed a number of abilities — not just to control the details of the visualization, but radical things like being able to view from any angle (rather than a handful of presets), continuous saves, unlimited (in-session) undo, and threaded background file reading. Somewhere in here it also gained the ability to do some prep for controlling the analysis software, letting the user visualize the inputs so they didn’t run the analysis for a few days only to find out they’d set it up incorrectly.\nThe First Report One morning one of the internal users (an analyst) reported seeing the app trying to delete his entire home directory on shutdown. After some prodding, he actually noticed it trying to delete some network mount files he didn’t have permission to edit, which was throwing warnings, but there were definitely some files that had been deleted from his home directory as well. I heard it secondhand, from a developer who was in the room with him when it happened (small company), and who had him kill the process as quickly as he could.\nObviously we tried to reproduce — after disabling absolutely every spot that interacts with files and logging the action instead. It took a couple hours of trying and tracing, but we were able to track it down.\nThe Cause This application worked with some large files. We had recently tried to make it nicer for users by caching some of the info (in a temp dir) while the app was running. This was back in the days before there was a lot of room on hard drives to keep this cache data around — not for the sizes of files this app was dealing with. So, being (we thought), good and proper stewards of hard drive space, we cleaned up that cache data when the program quit.\nExperienced developers probably already see where this was going.\nTo speed startup, we delayed most things we could until after the app was up and going. That included setting up the cache directory (the user had either given a file on the command line, in which case the assorted set-up code would need to be run anyway and it wouldn’t show any faster, or they opened it and then navigated a file selector dialog, in which case we could generally set it up before they’d even selected the first file or folder).\nWhat happened if the user quit (and the app processed the quit) before the cache directory was set up? Well, you’ve read the bug report already, but the app would dutifully take the (empty) path, append “/*”, and tell the system to start deleting.\nThe Aftermath Very fortunately, this had been so recent the builds with this code hadn’t made it out of the company, and each version was quickly tracked down and deleted so they wouldn’t be.\nThe code was fixed as well, of course — and hopefully in a way to prevent more accidents. We made an internal function for deleting anything, and inside that we a) checked the path to make sure it wasn’t empty, b) checked that the path actually existed, and c) enumerated over the items instead of making a system call, bailing on the first error (which would have been the first directory inside “/” if for some reason the first check was bypassed, since it wouldn’t recurse into directories).\nToday, I’d use a library to manage the temp folders and files, and let it clean things up. Or if I had to, maybe just leave the files in the temp dir and let the machine clear them in the future. Or even not use a cache file — a couple of decades of machine performance means files that size probably wouldn’t cause anyone to blink these days.\nBut above all, I learned to double-check any code deleting files from to ensure the inputs are checked before we start deleting.\n","description":"","tags":["coding","bugs"],"title":"Worst Bug 1: Accidentally Wiping the Drive in Linux","uri":"/posts/worst_bug_1/"},{"categories":["Review"],"content":"Annual reading statistics and observations at the end of 2023…\nMost of this info taken from The Story Graph.\nOverall I started 68 books and finished 65. 2 were abandoned with no plans to revisit, and I’m currently reading 1 with little chance to finish before midnight.\nI also read 2 magazines not yet included in the totals (I haven’t added the\nThis is 5 (8%) more books than last year, which wasn’t intentional but not unuusal given variations in book length, etc.\nComposition Most of my reading was Science Fiction and Fantasy – 60 books total. 32 (50%) were fantasy and 28 (43%) Science Fiction.\nI read 4 nonfiction books last year. I’d like to improve that in the coming year.\nTiming I had a small slump in reading around May and June, and then a bigger slump in October and November. I’m not sure what was happened in the earlier slump, but the latter was lead-up and immersion in NaNoWriMo, when I intentionally use a lot of my traditional reading time to try and write instead.\nFormat As in past years, the vast majority of my reading was electronic. I think I read 1 book in phsyical format.\nSelection As mentioned above, only 4 books (6%) were nonfiction, and I want to read more of those.\nFor a simple look at some diversity metrics, 36 books (55%) were by female (or presenting) authors; 23 (35%) male (or presenting); and 7 (11%) were collections, collaborations, or not easily identified.\nThe Superlatives I read 3 books I gave maximum ratings to: - Jade City and Jade Legacy by Fonda Lee - Bookshops \u0026 Bonedust by Travis Baldtree\nThe best series I read/finished should come as no surprise given that, which was The Green Bone Saga by Fonda Lee.\nMy most-read authors were Tanya Huff (9 books), Brandon Sanderson (6 books), and Seanan McGuire/Mira Grant (5 books)\n","description":"","tags":["reading"],"title":"Reading Review, 2023","uri":"/posts/reading_review_2023/"},{"categories":["Recommendations"],"content":"I’ve been using 4thewords.com1 for a little more than 4 years now. It has definitely helped improve my writing habits — I write more frequently than I did before using the site2, and writing has become a little bit more fun even when things are stuck.\nNote: Updated to reflect the new subscription plans, which now include a free tier.\nAbout 4thewords 4thewords is an online, subscription-based writing (drafting3) interface with an RPG-type game layered on top. You “fight” monsters by writing words, and finish questions by a combination of fighting monsters, harvesting loot from defeating them, writing a certain number of words, or various other mechanics. As you progress in the story and get more and better gear, you can tune your gear to either increase your attack rating against monsters (each word you write counts for some multiple against the monster), your defense (more time allowed to defeat the monster) or luck (better chances at drops).\nBesides the main story, they have festivals throughout the year with special monsters and quest lines. Right now you could join in on the winter celebration and do some snowball fights.\nAs you’re drafting, you can organize your files into projects and track them that way. I lightly use projects, but it’s nice to have available, and I’d use them a lot more if I wasn’t already a Scrivener fan for the rest of my organizing and editing work.\nThe site also has a huge variety of different ways you can cloth your avatar, and more recently houses that you can decorate. These can both be shared with others, if you like. It also has forums, multiplayer-based battles, and the ability to publish some of your work with others on the site if you so wish. I’ve barely used any of those, but some people like them.\nFinally, they track writing statistics and (importantly) writing streaks: the number of days in a row that you’ve written more than 444 words. The longer that streak gets, the better the rewards.\nWhy It Works For Me First of all, fulfilling quests is just fun, and fighting monsters along the way gives you small bits of dopamine on your way to the larger bits. Many is the time when I felt like I was done writing for a little bit but needed some more words to win a battle with a monster, and then realized I’d written quite a bit more than I expected to. Along with that, a variety of monsters that require a variety of words means I can pre-commit myself to writing a certain amount, and then pressure my ten-minutes-future self into sticking with the writing when I know I’m going to struggle a little bit.\nThe festivals can be a lot of fun, and the time-limited aspect of some of them means I will sometimes squeeze out another few minutes of writing to make sure I get some of those quests finished and reap the rewards, which adds up over time.\nIt’s easy to export the written words elsewhere. I usually use minimal formatting so I often just copy/paste, but they also offer a few export options.\nMost importantly, it has a streak done well. 444 words is an achievable amount without seeming too simple, so I feel like I can do it most days. But they also recognize that life happens and you can keep your streak in other ways — using in-game items, you can repair your streak after it’s been broken, using those same items you can plan ahead and mark certain days as ones you won’t be writing, or on a given day you can mark that day as a streak day without writing the necessary number of words. The last is what I tend to use when I need to — if a day has just wiped me of all energy, I know I can log on and in a few clicks mark that I really wanted to write, I just didn’t have the energy to do so, and I still get my streak rewards.4\nMy Stats As of the time I wrote this, I have written over 1.2 million words on the site alone, spread over 575 hours. In that time I’ve defeated over 6 thousand monsters and completed over 1800 quests. But, per the site’s dashboard, I’ve only found just over 50% of the site’s monsters, so I still have years of quest possibilities laid out in front of me.\nGive It a Go The best time of year to try it out might be during NaNoWriMo, but there isn’t bad time to start. They offer a free plan so you can poke around and see if it suits you as well. Who knows, it might help you start a new and better writing habit.\nIf you decide to try it out and use my referral code HLDCL87660, if and when you subscribe we’ll both get a bonus allotment of in-game crystals, which can be used for in-game rewards. ↩︎\nFor one example, I wrote the first draft of this blog post on the site. ↩︎\nYou can edit, but the site isn’t designed around it. Likewise, you can draft elsewhere and copy/paste your words into the site, but some of the site won’t work with that method. ↩︎\nI estimate I’ve used that about 10 times over the past year ↩︎\n","description":"","tags":["writing"],"title":"4thewords","uri":"/posts/4_the_words/"},{"categories":["Work History","Context Changes"],"content":"I’ve told a few people this story, but in the 2000s I started a new job for a company that had reworked a lot of their software development process a couple years earlier, after a disastrous software release. A lot of that process ended up being much heavier and inflexible than necessary — another story for another day — but one thing in particular stands out to me: the code review process.\nMore specifically, one quirk of the code review process.\nWhen the developers were faced with the need for process, they did what most people might… they looked around and adopted from well-regarded companies1. That company was IBM.\nLike many things you might expect from IBM, the process was formal and detailed. The code reviews involved 4 or more people, all with their own roles — author, moderator, reader, and reviewer2. These people were supposed to gather in a meeting room with a printed copy of the code diffs and proceed through the rest of the formal review process.\nI’m already imaging readers wincing, but there’s one detail forever ingrained in my memory: the process specified the code review was to happen before the developer compiled their code, or ran it.\nLet that sink in a bit: rather than have one developer run an (at the time) 2-15 minute compile, the process said 4 software developers should sit in a room for a minimum of 30 minutes (and usually an hour or more3). In what world does that even make sense?\nBear in mind this process came from IBM (though I’m not convinced they still used it at the time). It was published by s senior developer (or researcher) at the company… and had been in use for decades by then. And there is one of the keys — the process came from experience decades old. From a company known for their mainframe computers.\nAt one time, computing resources were scarce. People had to schedule time to have their program run (perhaps even loading it via punch cards), and if something went wrong during that time, they either fixed it during their time slot or waited for another time slot (days or weeks later) to try again.\nIn that sort of environment, the costs of a bug could mean the loss of a week or more, and the cycle time to test and adapt the code equally long. Those costs meant that spending 10 or even 20 collective developer-hours reviewing the code might still cost less than one mistake. In that environment, doing a code review prior to compile or run absolutely made sense.\nThen circumstances changed. PCs proliferated. Soon enough you had a computer on most developer’s desks that was waiting around twiddling its virtual thumbs looking for something to do.\nThus, what once made complete sense now seems nonsensical. But processes and habits took longer to catch up4 — even for a group of people who generally all disliked the heavyweight code review process as it was.\nI was reminded of this when reading Cory Doctorow’s book review of How Infrastructure Works by Deb Chachra, which turned my perception of the constraints between manufacturing and energy usage on its head:\nWe’ve spent millennia treating energy as scarce, despite the fact that fresh supplies of it arrive on Earth with every sunrise and every moonrise. Moreover, we’ve spent that same period treating materials as infinite despite the fact that we’ve got precisely one Earth’s worth of stuff […]\nChachra proposes that we could – we must – treat material as scarce, and that one way to do this is to recognize that energy is not. We can trade energy for material, opting for more energy intensive manufacturing processes that make materials easier to recover when the good reaches its end of life. We can also opt for energy intensive material recovery processes.\nWe aren’t there yet — right now the majority of our energy still derives from materials pulled out of the ground — but we could be there soon. From the same article, our current total energy needs use less than 1% of the solar energy that reaches the earth. Once we have enough renewable energy to cover our existing needs, things that once looked nonsensical may suddenly make a lot of sense. Like spending a lot more energy recycling material back into usable forms.\nThis idea genuinely delights me, and I can’t wait to see how things might adapt when we get there.\nA method full of pitfalls — also a topic for another day ↩︎\nI believe this article from 1976 was the source of the process, somewhat modified before I was subject to it. ↩︎\nSince the process was so heavyweight, reviews grew large so developers could (supposedly) minimize their time involved with it. ↩︎\nThere was an exception for a “desktop review” with only one other person, for minor changes. I (and a couple others) latched onto that and made most of our changes minor (a good habit anyway), and the practice spread, and eventually nobody was doing the full review part of the process. Then I was able to get that part of the process removed, since we weren’t even doing it. ↩︎\n","description":"","tags":["code review","energy abundance","contexts"],"title":"Changing Circumstances: Code Reviews and Energy Abundance","uri":"/posts/changing_circumstances_code_reviews_and_energy_abundance/"},{"categories":["Recommendations"],"content":"I don’t remember when I started reading Schlock Mercenary1, but it was at least ten years ago. That’s a pretty solid quarter of the part of my life I can remember (which is an odd idea in itself, that a decade could only cover that much time).\nFor well before I started reading and most of the past decade, Howard Tayler ensured a daily dose of Schlock Mercenary, for free, on the website. Every day. Weekends included. The entire run of Schlock Mercenary ran for over 20 years2, and I don’t know if there was ever a missed day. Every day, at least one strip, at least one punchline, and advancing the overall story3. Besides the joy, that consistent hit of a small bit of dopamine was its own reassurance that some things were and are still right in the world.\nTayler and his team are now running a kickstarter for a print run of Mandatory Failure, the 18th of 20 books in the strip. It’s standalone in that you can read it and understand what’s going on… or, you could read the archives or pick up some of the previous books in their store or as add-ons once the campaign ends. They’ve run multiple campaigns before (which I’ve backed) and successfully delivered results, over and over. It’s not something every Kickstarter campaign can claim.\nI recommend you become a backer — and not just because more backers may eventually mean more goodies I can purchase, but because it’s a good story and will probably provide you with some hours of amusement and entertainment, like it did for me.\nThe author-recommended starting point is Book 10: The Longshoreman of the Apocalypse ↩︎\nIf I think my following the strip for 10 years is an endeavor, what must 20 years of producing it have been like? The mind boggles. ↩︎\nAs I recall, there were a couple small diversions in Octobers, but those were still story, and still with the characters I showed up to read about. ↩︎\n","description":"","tags":["schlock","kickstarter"],"title":"Kickstarter for Schlock Mercenary: Mandatory Failure","uri":"/posts/mandatory_failure/"},{"categories":["Management Kaizen"],"content":"In the past few months, SARS-CoV-2 and COVID-19 have swept through much of the world and disrupted societal patterns everywhere – including how we get our work done. Software development is primarily knowledge work and not generally tethered to any one particular location, so we’ve been lucky that we can keep our jobs and keep working even during the various emergency declarations in place. Others are not so lucky, and I acknowledge that.\nEven with our advantages, however, this has led to disruptions – large swaths of software developers are now working remotely when they had not previously done so. Many teams are experiencing this for the first time, and it’s naturally led to some uncertainty and almost certainly a lack of productivity. It’s ok to acknowledge this as well, and look at where we are now in order and take a deep breath. Then keep making those small improvements, because in the midst of a forced change, those small improvements can make a wonderful difference.\nOne of the difficulties I (and many others) have been dealing with is the extra bit of effort it takes to communicate when you can’t just meet someone in the hall and have a face-to-face discussion – the bandwidth for conversations is unavoidably reduced right now, even with good video chat. And it’s easier to be distracted by email that just popped up while you were chatting – I’m sorry, what was that again? Right.\nOne improvement we can make – everyone together or everyone distributed, or anywhere in between – is to improve the clarity of our language.\nSay What You Really Mean I had the privilege of attending a session at a Humanizing Work conference about clarity in language titled Say What You Really Mean, run by Dallas Hinesly and Richard Lawrence. It introduced me to the concept of Speech Acts Theory and some of the ways it can be applied at work to improve clarity of communication. Much of this is based on notes from their session, along with subsequent reading and a good amount of percolating.\nAn aside – if you have a chance to attend the Humanizing Work conference, I highly recommend it. Every year I’ve gone I’ve learned at least a few things that are immediately beneficial to my job, plus a bunch more to bounce around in my head and make random connections. I’m hoping travel restrictions don’t end up torpedoing the event this year.\nSpeech Acts Theory categorizes and splits different parts of speaking into five things that humans hope to accomplish by speaking. Here I’m dwelling on only two categories of speech acts (and touching on a third). I call these two categories Asks and Responses (not the original category names as far as I’m aware).\nI hope the meaning is straightforward, but to make sure everyone is clear, an ask is something communicated by one person that might instigate different behavior in one or more of the people receiving the communication. A response is a communication back to the person who originated asked something to indicate if certain behavior will occur. The types of each shown below should add clarity to this formal definition\nAsks are English words that most people probably instinctively understand, but part of clarity is being explicit about exactly what is meant:\nTo Offer is when the asker will give or provide something that will likely be of value to the responder(s), but has less value or requires some work for the asker. To Invite is when the asker would like the responder(s) to go somewhere or do something together with the asker. To Propose is when the asker would like the responder(s) all agree to pursue something that would be beneficial but needs coordination and effort from others. To Request is when the asker wants the responder(s) to do something that will be valuable to the asker, but might be of less value or require work of the responder(s). To Require or Demand is when the asker is working from a position of authority and indicates the responder(s) have no choice in doing the action the asker details. Likewise, Responses are pretty straightforward, especially in the context of an explicit ask:\nTo Agree or Accept is when the responder indicates to the asker that they will do the action in the ask To Decline or Reject is when the responder indicates to the asker the they will not do the action in the ask To Counter is to offer an alternative ask back to the asker (thus temporarily reversing roles; the original asker should now use a response for the counter) Using the Keywords There are two ways these can really be used. In the first, if you are the asker, you think through the types of asks and decide which one this falls in, and phrase your ask in such a way to properly convey the type. In the second, you share the knowledge of the key words for each type, and use those key words in your asks and responses.\nNaturally, if you really want to be clear, I suggest the second – and if you do the work of the first, it will naturally end up happening most of the time without any extra effort. After introducing these to people I work with, I’ve taken to making them the first word in an email subject, or in an IM that is trying to create an action on their part.\nA Third Keyword and Category One more action that commonly occurs in a work setting is giving people information so that they have the information handy in order to use as they decide they need it. You could perhaps twist that into an “Offer: information”, but that would not be a very clear subject line for most emails.\nInstead, I offer one more category, that of Inform:\nTo Inform or Info is when the communicator is passing information along with no change in behavior needed or desired from the recipient(s) of the communication. Like the asks, I try to prefix the email subject or the IM with the Info keyword to let the recipient know that no change in behavior is necessary.\nTips and Tricks Don’t Mix and Match In any given communication, try not to mix the different categories of Ask, Respond, or Inform. If you really think it makes sense to do so (like an email with information to explain a request), either use the keyword that indicates action needed, or use both keywords right up front so the recipients of the communication know what to expect. This is especially important in emails, less so in an ongoing back-and-forth IM session or real-time voice discussion.\nPush for Clear Responses You might notice that the responses don’t include “ok”, “yeah”, or “uh-huh”. This is because in English, those words have overloaded meanings – they might mean “accept”, but they might mean “I heard you” or “I understand” without meaning an acceptance. Pushing for a clear “I accept” or “I decline” (or other non-ambiguous words) means everyone understands the acceptance or rejection.\nNot pushing for the clear response is very frequently the downfall of meetings, where later you’ll hear someone say “I didn’t agree to that”, and everyone will have to have another meeting to make sure all participants are clear on what is being agreed to. Save yourself some time and heartache and get the clarity before leaving the first meeting.\nIndividuals Respond If there are a group of people responding, each individual needs to respond (or someone with the recognized authority to respond on behalf of a group). Again, otherwise it’s easy to end up needing a second meeting to make sure everyone is clear on who is doing what.\nActions Can Stand In For Responses There can be many situations in a work setting where doing the action is an implicit accept of an ask – for example, if I email a request for a document from Pat, they don’t have to reply with “accept” and the document attached. The presence of the document lets me know it was accepted.\nAsk/Response Pairs Nest Frequently, prior to responding, the responder(s) might ask for clarification. This happens in the natural place for a response, but isn’t itself a response. Instead, it’s the beginning of a new, nested ask/response where the ask is a request for clarity, and the asker will presumably accept the request by providing more information, which then drops out of the nested ask and leaves the original responder yet to respond. As a software developer, I tend to view these like nested HTML tags – close the nested ask/response communication before closing the outer one, if possible.\nReally, Use the Keywords The simple act of deciding to use the appropriate keyword in your communication, especially for asks, will usually cause you to think about what exactly it is you are doing with the ask, and make that clear to the recipient. For example, it’s common for a phrase such as “I’d appreciate it if you could fill out your time card” to be used either as a request or a demand, but which is it? By context, it’s likely a demand, but maybe it’s not?\nBy adding the appropriate keyword, extra parts that need clarity are brought to the surface:\n“Request: Fill out your time card.” By phrasing it as a request, it’s now clear that the responder(s) can decline – but if that’s the case, what value is there at all in filling it out? If the responder(s) may not know, adding that to the request might help. Perhaps it’s to run some preliminary billing info for a client? If so, there’s probably a deadline after which it wouldn’t matter. Adding those details might turn it into something like “Request: Fill out your time card by 5 PM to help with a preliminary time \u0026 mat estimate for Acme Corp” “Required: Fill out your time card.” Phrased as a demand, it’s now clear the responder(s) aren’t supposed to decline (or some undesirable response will happen related to their employment). How will the compliance be evaluated, though? It’s still missing a time, at least. “Required: Fill out your time card before you leave for the weekend.” is better yet. Sources Besides my notes and noodling, the primary source seems to be Searle’s academic work on Speech Acts Theory. As is frequently the case, Wikipedia has an overview.\nThis post originally appeared on management-kaizen.com\n","description":"","tags":["communication","clarity","systems","ported"],"title":"Speech Acts: Adding Clarity to Communication","uri":"/posts/speech_acts_clarity/"},{"categories":["Management Kaizen"],"content":"Say you want to make an improvement to your work processes. How much time is feasible to spend making that improvement? I think most people assume it’s smaller than the math actually bears out.\nLet’s start with a really simple check using easy numbers. Assume:\n40-hour work weeks 50 working weeks in a year 1% improvement Payoff in 1 year 100% certainty of achieving the improvement Simple multiplication of the formula\nYears * Weeks/Year * Hours/Week * Improvement * Certainty\nGives 20 hours to obtain that 1% improvement. 2.5 days. Half a work-week.\nIs that enough? I’ve seen many slowdowns that could be significantly improved with 20 hours of effort, possibly enough to make a 1% improvement. But those are just sample numbers. What drives the biggest changes?\nVariations Let’s vary individual inputs to get an idea how they interplay.\nWeeks Per Year 44 46 48 50 52 Improvement Hours 17.6 18.4 19.2 20.0 20.8 As you can see, the number of working weeks in a year doesn’t significantly alter the time you can dedicate to it – if you have 6 weeks time off (vacation, holiday, personal, etc), the payoff allows for 18 hours instead of 20 – not a significant change.\nHours Per Week 36 40 45 50 60 80 Improvement Hours 18 20 22.5 25 30 40 Obviously, if you work fewer hours each week, it allows for less time investment, and more hours worked per week allows more time investment – but spending 40 hours of an 80-hour work week is still spending just half the week (hopefully you can do that a few times and use the time saved to work less).\nPercent Improvement 0.5 1.0 1.5 2.0 2.5 Improvement Hours 10 20 30 40 50 Not much to say… but if you can find something that makes you 2% more efficient, you can spend a week on it and still have it pay off within a year.\nCertainty of Improvement 50 75 90 100 Improvement Hours 10 15 18 20 This is a linear scale on the amount of time that can be invested – the more uncertain, the less time allowed to create a margin of safety.\nI’ve generally found that the margin of safety and percent improvement are correlated; as the amount considered feasible for improvement goes up, the odds of mistaking the amount of improvement go up, so a higher margin of safety is required. I tend to balance these by just sticking with my initial assumptions.\nFuture Years Let’s say you could consider more than the current year when accounting for the improvement. That usually involves discounting the future amount (saving time in the future isn’t as valuable as saving time now). Below is a simple table showing the improvement hours allowed for different additional years and discount values on those years.\nYears Out 0 1 2 3 4 0% Discount Rate 20 40 80 120 160 10% Discount Rate 20 38 54 68 80 20% Discount Rate 20 36 48 56 60 30% Discount Rate 20 34 42 46 – 40% Discount Rate 20 32 36 – – 50% Discount Rate 20 30 – – – The number of years out should be chosen by how long into the future the process improvement is likely to be valid, and the discount rate by how certain you are of that future.\nExample 1: You improve the process for updating a vital component of a website so it saves 1% of your time, and it will be in use as long as the current product is in use, but there’s a high chance of a new technology requiring a rewrite. You might choose 4 additional years but have a 30% discount due to the chances of rewrites.\nExample 2: You improve the process for that same vital component. That component is road-mapped to be replaced in 3 years. It’s scheduled to be used at least until then, so you might use the table for 2 additional years, but only a 10% discount.\nPutting It All Together I ran a 50,000 Monte Carlo simulation and it showed the following distribution:\nIt showed an average allowed time of approximately 40 hours, with a standard deviation of about 19.5 hours… which means the simple math of spending 20 hours to obtain a 1% improvement is a pretty good bet1.\nBut That’s Not Enough! If 20 hours doesn’t sound like enough, perhaps you should go through the calculations yourself, using your own numbers for all of the variables. It might be higher (or, if you’re uncertain as to the improvement, it might be lower).\nBefore you do, however, consider…\nMost people doing software development right now work in teams rather than as individuals. Due to the ease of sharing code improvements, and the likelihood that process improvements would apply to multiple people in the company, the numbers start ballooning:\n# of Developers Impacted 1 2 3 5 10 25 50 Improvement Hours 20 40 60 100 200 500 1000 This is the real benefit of the improvements – and where you can argue for spending a lot of time. It’s why companies can afford someone working on developer-efficiency tasks much earlier than many do: possibly as early as 3-4 other developers. With 4 other developers and given just one week to make a process improvement, it pays off up to double-fold.\nAnd those improvements continue to compound.\nThis is another reason why I say that quality trumps other considerations; given the leverage inherent in a system like software development, where the primary cost is the salaries of the developers, it’s pretty easy to imagine a company reaping a positive feedback loop on process improvements for years.\nSpend the New Year Improving Things If your workplace is anything like mine, you probably have some ideas where you might be able to improve your process by 1%. Maybe take some of the numbers from this post and make a new-years resolution to make some improvements at work. You’ll produce more, and you’ll probably be happier to boot.\nThis post originally appeared on management-kaizen.com\nAssuming my inputs were realistic. ↩︎\n","description":"","tags":["kaizen","models","montecarlo","numbers","ported"],"title":"Dedicated Time for Improvement: Running the Numbers","uri":"/posts/dedicated_improvement_time/"},{"categories":["Management Kaizen"],"content":"In college, I took a number of humanities courses – I minored in English, primarily creative writing. This frequently involved putting something not very good1 in front of other students so they could tell me the different ways it didn’t work. This kickstarted my lessons on how to take that critical feedback and use it to make my work better.\nWhen you hear others talk about things that aren’t great in what you’ve made, it’s easy to get emotional. If you don’t, great! This post isn’t for you2.\nThe problem with getting emotional is that if you get defensive, you raise the cost to the other person to give you some feedback; and if you can’t get over the defensiveness, you limit how useful the feedback can be in helping you improve. And the whole point of getting feedback is to help you improve, either the work under consideration or your own abilities to produce more like it.\nThe Steps So here’s the process that works for me when I get feedback. Sometimes it’s harder to follow than others, but it helps me get value from every feedback session I’ve had.\n1. Shut My Mouth I won’t get the feedback I need if I’m the one talking – and the more I’m talking, the more likely I’ll end up saying something defensive3. So I keep my mouth shut – usually completely shut, but occasionally say small phrases so others know I’m listening and engaged (“Mm-hmm, go on…”).\nI keep my mouth shut until they peter out of feedback, and make sure leave a bit of extra space in case something else occurs to them.\n2. Request Clarification, If Necessary Once the feedback stops coming, this is one of two things that I might say (the other is thanking them, knowing that I’ll probably have a more thorough thanks later). I want to make sure that I understand the feedback they’ve been giving me. I keep these as simple, direct, and open-ended as possible so I’m not unduly influencing them: “You said Foo – can you go into more detail on that?” or “Did X happen before Y, or the other way around?”\nThis is also when I’ll mentally categorize the feedback and dig for symptomatic feedback if it wasn’t present.\n3. Ask Directed Questions If I have certain things I want feedback on, and the general feedback hasn’t addressed them, I might ask some directed questions about those things. For example, “What did you think about foo?” or “Was bar confusing?”. I still keep these questions as open-ended as I can – it’s better to start broadly and narrow focus with later questions, if possible.\n4. Repeat 1-3 as Necessary When asking properly broad directed questions, I again need to keep my mouth shut during the response, and might need to ask more clarifying questions or directed questions.\n5. Acknowledge Acknowledge the feedback they’ve given me. I don’t go over everything in detail again, but enough to show I heard it and will consider it. I frequently re-iterate the top two or three things I heard from them (as I prioritize them) and will, if it’s immediately obvious, give some indication of how I might improve things based on their feedback, so that they see an immediate benefit for the time they spent with me.\nAt this point, if I’ve discovered I’ve done something that needs an apology, I’ll apologize. This doesn’t happen often, but despite step 7, apologies shouldn’t wait.\n6. Thank Them This person (or people) just took the time to give me information that should help me improve (either myself or a particular item). They deserve thanks for the effort.\n7. Percolate Critical feedback can sting. Even with the best intentions, I usually have an immediate reaction to reject or fight against parts of the feedback. If I feel this after the feedback session, I save my notes and put everything away for a time. Waiting until after I’ve slept is ideal, but putting another engrossing activity in between receiving and reviewing feedback on the same day sometimes works. This needs to be long enough that the initial sting and instinctive defensiveness is gone, and the feedback can be truly considered, but not so long that you forget about it entirely.\n8. Seek Multiple Opinions (if Necessary) If some feedback leaves me confused, or I think the critic was unique in perceiving a problem (or stem from the critic’s confusion), it can help to get feedback from others. Sometimes the additional feedback lets me know I can safely discard parts of the original. Sometimes it helps me triangulate on the real problem. And sometimes (more frequently than I might like to admit) it reaffirms the original critiques.\n9. Weigh Feedback Take stock of all the feedback and decide what to do to address it. Sometimes that means fixing the problem. Sometimes it means ignoring the feedback, or changing something in another spot that negates the feedback. But all items of feedback get some sort of specific resolution.\n10. Follow Up Let the person who gave me the feedback know (again) that I appreciated it, and that I’ve used it to improve what I did in some way – the more specific my communication, the better. This lets them know (again) that I valued the time and effort they put into things, and makes it more likely that they’ll be willing to give me feedback again in the future.\nA Cheat Sheet So there it is, a nice, ten-step process to dealing with feedback without becoming defensive. If you need a cheat-sheet, steps 1 (shut my mouth), 5 (acknowledge), and 6 (thank them) are the most important while actually receiving the feedback, and even the majority work of steps 5 and 6 can be managed later with follow-up messages.\nJust remember – the more time you spend talking, the less time you have to learn from the critic, and the point of getting feedback is learning from how other people interact with your work.\nThis post originally appeared on management-kaizen.com\nObviously; I was still learning. ↩︎\nAt least, not yet. ↩︎\nOr otherwise derailing the feedback. ↩︎\n","description":"","tags":["communication","feedback","systems","ported"],"title":"A 10-Step Process for Properly Accepting Feedback","uri":"/posts/accepting_feedback/"},{"categories":["Management Kaizen"],"content":" For some of my creations I’m completely open to feedback and criticism, while for others I’m defensive. Is there a pattern? How do I move away from being defensive?\nParaphrased and anonymized from the Rands Leadership Slack\nWhen you make something and ask someone for critique, you’re making an effort to improve what you’ve made. Why, then, is it so easy to turn defensive and fight against receiving what you asked for?\nIn my experience, a lot of it deals with getting the “wrong” category of feedback, and especially not knowing how to deal with different categories of feedback differently, and how to move people toward giving the category of feedback you’re looking for.\nThe Categories Developmental Developmental feedback and critique is what you get from a trusted partner working with you as you develop your work. Frequently, this won’t even feel like feedback or critique; there may be a lot of “we” words involved, and it will feel like collaboration instead of presentation/critique. However, this can still be sought from someone you know does this well, and you trust to help you figure out problems you’ve been having.\nThis will often sound like:\nAre you trying to reduce button presses or reduce confusion?\nWhat if we added a touch of animation here?\nHave you gone through the corner cases and figured out how to deal with them?\nSymptomatic Symptomatic feedback is when someone explains what happened and how it made them feel or react, and only how it made them feel or react.\nWhen I pushed this button, then waited for a bit, I got confused. Then frustrated that I had to press it again.\nI smiled when I saw the little animation.\nI clicked this button, then this one, then this one, and the app crashed.\nDiagnostic Diagnostic critique adds a cause to the symptom feedback.\nWhen I pushed this button, then waited for a bit, I got confused, because it took too long to show me what it was doing. That made me click it again.\nI smiled when I saw the little animation because it did a happy wiggle.\nI clicked this button, then this one, then this one, and the app crashed, because it let me continue without having selected an option.\nPrescriptive Prescriptive critique build on diagnostic by also including what should be done to fix the corresponding diagnosis.\nWe should show a progress bar because when I pushed this button, then waited for a bit, it took too long to respond and I got confused and clicked it again.\nI smiled when I saw the little animation because it did a happy wiggle, and we should definitely keep that.\nWe need to have a pop-up to force the user to select an option when they click this button, then this one, then this one, otherwise the app will crash because it’s trying to continue without a selected option.\nThe most commonly problematic aspect of categorizing prescriptive critique (and what most commonly leads to outsized emotional responses) is that it frequently implies or completely omits the diagnostic that led to the prescription:\nYou should show a progress bar.\nWe should definitely keep the animation.\nYou need to have a pop-up here to force the user to select an option when they click this button.\nThis causes the prescriptive feedback to superficially appear like developmental feedback. The easiest way to tell them apart is to look at who is driving the decision: in developmental, the critic is asking or guiding the creator to decide what needs done, while prescriptive feedback has the critic deciding what needs done.\nWhat (and when) to request Now that you know the categories, which one you want to ask for depends on a number of circumstances, and at different times you’ll want to get the different types of critical feedback.\nDevelopmental As implied by the category title, you’ll most often want this type of feedback during the creation of your work. In particular, you might seek this type of critique if you’re feeling frustrated or stuck on the actual creation. If you do, be selective on who you choose for critic, and once you find a good developmental critic, do your best to remember them (and thank them generously).\nSymptomatic Symptomatic feedback is the most broadly applicable type of feedback – you can ask for it from nearly anyone. You might choose to get some of this critique while creating your work, to make sure you’re on the right track, but this is most important between revisions so you can use the feedback to improve the next iteration.\nBesides having the broadest pool of qualified people to give the feedback, you’ll also want to seek more people to give you this type of feedback than other types, because this allows you to see the wide range of reactions people will have to what you’ve done. The drawback is you might find critics who think you’re asking for diagnostic or prescriptive feedback (or who only know how to give those) so you may have to coach your feedback partners on how best to give this type of feedback.\nDiagnostic Diagnostic feedback can be incredibly useful – but it has to come from someone with enough knowledge of your work that they can properly diagnose the issue. Peers can frequently fill this role, especially if you fill them in a little about the specifics of what you’ve done. By using their knowledge of their own thought process and expectations, you can sometimes quickly get to the root of an issue that might otherwise have left you bewildered – how exactly did they even get to that page? Knowing the cause of an issue can sometimes mean a very simple fix to eliminate it.\nThe way you use the feedback shows when to ask for it: if you’re confused about symptomatic feedback (especially the same symptom mentioned by multiple people) and can’t figure it out, finding a peer to help diagnose the issue can be a wonderful and enlightening solution.\nPrescriptive Prescriptive feedback is the classical double-edged sword. With someone who knows well what you are trying to do, has all of the context, and has your trust and respect, the feedback session feels similar to collaboration. When any of that is missing, it feels like micromanagement or taking ownership away from you.\nThis means you should be careful who to ask for prescriptive critiques – just as careful as you would a developmental critique (and critics who can do this well are just as valuable). The only time I recommend specifically seeking a prescriptive critique is when you have diagnosis you are quite sure is correct, but you’ve been unable to resolve.\nIn this case, if the critic’s diagnosis matches yours (or otherwise explains the symptoms correctly), the prescription might be just what you need to make your creation work.\nReading your reactions (Or, what to do when you get the wrong category)\nIf every creator knew exactly the type of feedback they wanted and clearly communicated that, and every critic understood the categories and how to properly give each type of feedback, critiques would be much less traumatic1.\nIn the meantime, as the creator you can learn to work with the types of critiques you get from your critics, and sometimes how to guide the critics into giving you what you need. Doing this involves a bit of introspection to understand your own reaction to receiving the feedback.\nSymptomatic Most of the time, when you get this type of feedback, you’ll have one of three reactions:\nYep! – satisfaction that things went how you expected or desired D’oh! – immediate recognition of a problem (and often how to fix it) Huh? – curiosity about what caused them to experience what they report Using your knowledge of what you’ve done, you can decide whether the symptom is something you want (or can live with), or something that needs addressed. You can determine how you want to address it, and why you choose to address it that way. You might know enough to change things in a seemingly unrelated way that resolves the problem.\nIf your reaction is curiosity, you might choose to ask for more information that can lead a critic into diagnostic feedback – most simply, asking why they think they felt what they did, or just asking for what led to the feeling.\nDiagnostic The common reactions to diagnostic feedback parallel the unsatisfying reactions for symptomatic feedback:\nD’oh! – immediate recognition of a correct diagnosis What? – confusion about the actual diagnostic feedback. Why? – a diagnosis that omitted the symptom If the diagnosis omitted the symptom, you need to make sure to get the symptom from the critic, or risk solving the wrong problems, or attempting a solution that doesn’t actually address the problem. This is easy to resolve – when you notice the lack, ask follow-up questions.\nIf, however, your confusion stems from the actual diagnosis, it’s likely an incorrect diagnosis (possibly from confusion on the critic’s part earlier in the process). These can usually be simply thrown out, though if you’re curious about what caused the diagnosis you might want to dig for other, earlier symptoms for hints2.\nFor both failure modes, having two or three people provide the diagnosis (or starting with one and getting a second opinion if necessary) can help catch some of the pitfalls.\nDevelopmental and Prescriptive I’ve combined developmental and prescriptive reactions and techniques because they are so similar to each other when incorrectly applied.\nIf you’re getting angry or frustrated at a critic for their feedback, like the person providing feedback is trying to change things in ways you disagree with or keeps meddling where they don’t belong, it’s almost always poor developmental or prescriptive feedback. (Not to be confused with being angry or frustrated at yourself for not accomplishing what you’d like.)\nIf this happens to you, first take a deep breath, and recognize it for what it is. Then, explicitly ask why they are suggesting what they are suggesting (and explicitly frame it as a suggestion, even though they might have said “you need to” or “we need to”, in order to nudge the session back closer to on track). Dig for the symptoms and (if desired) diagnoses, and make sure you record those – then choose whether or not to use the suggestion.\nIf this continues to happen, you’ll have to either get really good at digging for the symptoms and diagnoses, to train the person on the more desired feedback, or start avoiding the person’s feedback as much as possible.\nOne Last Tip Knowing and using these categories of feedback will help you, but sharing your expectations around feedback will help you even more. Let others know what type of feedback you’d like before you provide what is being reviewed, and maybe some examples of things you’d like to see (or would not like to see) before getting into the heart of the session. Do that a few times and you’ll either have a group of people handy who knows what you want for feedback, or you’ll get good at soliciting the right types of feedback from new reviewers each time.\nUse these categories to your advantage to make your review sessions more effective and less frustrating for everyone involved – and if they’ve helped you, drop me a note to let me know.\nThis post originally appeared on management-kaizen.com\nFeel free to send along a link to this post if you think it will help ↩︎\nOne notable example: I had written a story where the first paragraph mentioned a young lady flying to San Francisco. I meant taking a plane. One reviewer thought this meant she was a superhero, which made further diagnostic critiques nonsensical. ↩︎\n","description":"","tags":["communication","feedback","models","ported"],"title":"A Filing System for Feedback","uri":"/posts/filing_feedback/"},{"categories":["Management Kaizen"],"content":"Overheard1:\n“What would you say to [the business] in this case?”\n“I’d say ‘fast, cheap, or good, but they can only pick two’.”\nI was a bystander in this, but my immediate reaction was that it was setting up a false dichotomy for the situation (false trichotomy?). It occurred to me that the iron triangle has become an aphorism that sounds great, and so is applied far more than it actually warrants.\nThe Iron Triangle Chances are, if you’ve been in software or engineering for long, you’ve encountered the Iron Triangle. There is apparently nearly 50 years of recorded use, and it’s popular to cite in many engineering circles. It’s considered to be one of the fundamental trade-offs in project management:\nYou can deliver a project fast with high quality (many skilled workers), but it won’t be cheap You can deliver a project fast and cheap (many unskilled workers), but it won’t be high quality You can deliver a project cheaply with high quality (few skilled workers), but it won’t be fast Problems with the Iron Triangle The problem is the iron triangle as expressed fundamentally doesn’t apply to software development. (Or many other areas of skilled work, but that’s for another day). This can expressed in a few ways.\nMore people isn’t faster “Adding human resources to a late project makes it later”\nFred Brooks, The Mythical Man Month\nMany software engineers have encountered the idea behind The Mythical Man Month and agree with it, but somehow fail to apply the same thinking when they’re advocating for the iron triangle.\n(P.S. I used the original quote from Fred Brooks, but don’t refer to employees as resources).\nSome might object that the iron triangle talks about costs, not number of people, but…\nIn general, people are the major software development cost.\nI’m willing to allow that there might be some situations where licensing other software or acquiring certain super-computers lead to costs that outweigh the time of the people developing a system, but those are relatively rare. You’ll know if you’re in that situation. Instead, you commonly have situations like mine, where the annual budget can roughly be broken down as\n80%: People (salaries, benefits, etc.)\n10%: Conferences and training\n10%: Equipment and licensing\nIf 80% of the costs scale based on time spent on a project, this leads to the first observation directly in contradiction to the iron triangle:\nIn software development, faster is cheaper.\nThis is so true that you’ll commonly find companies doing things like spending thousands of dollars on new computers for their developers every year, just to make those developers slightly faster. It’s so true that after a certain size, companies will hire and dedicate other software developers, with those huge new salaries, just to make the existing developers faster. (It’s not a hard ROI argument to make: if you’ve 20 engineers, and one more can make all of them 5% faster, you’ve paid for the new developer in the first year, and can continue to reap those gains for other future hires.)\nThere’s another leg of the triangle to be broken, however, which is\nIn software development, better quality is faster.\nThis has been shown over and over again – the sooner you can catch a defect, the easier (faster) it is to fix. And remember - faster is cheaper, so better quality is cheaper as well. Even more than a decade ago many charts went around showing the relative costs incurred by defects in different stages of the development process (the first one I remember depicted a pure waterfall process).\nBut this is just focusing on costs (and recovery from) defects. Practices like BDD/TDD and Continuous Test have shown that in many cases, development with those techniques simply ends up faster than without.\nFinally, these are all just focused on one project… but how often is something made and has no maintenance or expansion? Okay, okay, everyone can stop laughing now. That leads to the final break in the iron triangle: despite nominally dealing with time by mentioning speed, it doesn’t account for repeated times through the process.\nGame theory then asserts that\nIn software development, better quality makes future projects faster and cheaper.\nAnd, unfortunately, this cycles the other way: cheat once and do a project with poor quality in an effort to be (temporarily) faster, and the next project suddenly takes longer. It’s burdened by the lower quality of the previous work, because some slice of the current effort has to deal with paying off the problems from the previous work. There’s even a whole metaphor behind this concept.\nThis can be a horrible spiral: A shortcut leads to worse quality which makes the next project slower, which leads to more delivery pressure which means more shortcuts, which means the next project is even worse, which means…\nEventually the bill comes due, and in some companies, the software developers sigh and say that’s just how it is, and the only way to solve it is a rewrite, because this time they’ll get it right.\nOr, you can choose quality from the beginning, and that bill may never actually come due.\nIntroducing the Iron Hungry Hippo Next time the iron triangle comes up, take a moment to reflect: does it really match the development of this project? If not, you may instead be in a situation with an iron hungry, hungry hippo:\nHigh quality eats all other constraints.\nOf course, this doesn’t apply to every situation, but if you’re on a development project where the primary cost of development is people’s salaries, and where there will be repeated efforts in the same code base, you’d be much better off to insist on good, fast, and cheap – and do it by insisting on high quality code as loudly and often as you can.\nThis post originally appeared on management-kaizen.com\ntechnically, over-read, as it was a discussion in Slack ↩︎\n","description":"","tags":["estimation","kaizen","quality","ported"],"title":"Why I’m Tired of Hearing About the Iron Triangle in Software Development","uri":"/posts/iron_triangle/"},{"categories":["Management Kaizen"],"content":"Here’s the situation: there’s a big industry conference in about three months, and your businesspeople and marketing team want to make a big splashy announcement — the kind that needs 2 months or so to prep and pull off. They’ve got the go-to-market name, and a list of (slightly negotiable) features, but they need to know which can go on the posters and banners soon so they can get them designed and printed in time.\nThese coworkers are reasonable, and they know you can’t guarantee anything… it’s not ideal to ship a week or two after the announcement, but it’s fine, if things slip a bit. What they can’t have is either not shipping for months after the announcement, or shipping the big new thing without the features promised to the users.\nAnd since the poster-building timelines are what they are, you can’t wait until a few days beforehand and just see what’s done.\nNow, normally something like this wouldn’t phase you… the team working on the feature would look at their estimates, at their velocity, do a bit of conservative forecasting to account for problems, and suggest the first 5 features are almost certain to make it, and the next couple might or might not, and the marketing team would go with that, knowing that the first ones are the headliners, and the extra one or two will make some customers happy but won’t be the focus.\nUnfortunately, you’ve got a brand-new team (maybe to scrum, maybe just to each other). Or an existing team that hasn’t done much estimating before. So now you’re looking at a list of user stories and features, and while your gut says these are all about this big, you don’t have a velocity or a team’s estimates to backstop things.\nSo you need a velocity, which needs estimated work items, and an estimate for all of the work.\nThe Affinity Estimation method (more or less) is the fastest way I know to get those estimates.\nIngredients The whole team One or two business/customer reps (if you don’t already have a Product Owner on the team) Printouts of every user story/feature, with ability to stick them to walls. (More than 10 for this exercise — fewer than that, either the team has no problem getting them all done, or you’ll want to break them into smaller pieces.) Have something to mark them for different features, if necessary. A pile of post-its and sharpies A conference room with a big wall, and 60-120 minutes The Process Preparation Select 10-30 of the work items (15-20 is the sweet spot, but if you need to estimate a hundred items, a few more initially will help). Try to select ones that seem to have a wide spread of sizes (the team will correct later).\nPut two signs on the biggest wall, at either end. One saying “Smaller” and the other “Bigger”.\nIf it hasn’t been done, have the PO or business people explain the goals to the team at a high level — customers, problems, desired features. Enough to understand roughly what the work item printouts mean, but not so much to bore them. 5-10 minutes max.\nExplain to the team that the exercise will help them get a rough estimate — good enough for starting, but plan on it being tuned later. Emphasize that the value of this exercise is getting the estimate roughly right very quickly, and so you might skip over minor disagreements in the interests of speed. If they have questions about what any item entails, you’ll pause the process to get those questions answered, but debates about how big will but cut off after a brief bit of time.\nBootstrap Ranking Pick two of the initial items and hold them where the team can see them. Ask the team to decide which one is bigger than the other. Give them a half minute to decide, and if there’s still disagreement, call for a vote then take the majority (if this happens, maybe remind them of the goal to be quick; you don’t want to waste anyone’s time getting more exact than necessary at this stage).\nAffix the smaller item about 1/3 of the way along the wall toward the “Smaller” sign, and the larger item about 2/3 along, toward the “Bigger” sign. Tell the team these can shift if necessary, but you’re starting with room for now.\nTake the next item and choose one of the items on the wall. Ask the team if it’s bigger, smaller, or between the existing two items. Again, give up to a half-minute and call for a vote if necessary, then affix that item in the middle of the space indicated by the team. Repeat this process again with the next two items, letting the team guide you to size each one relative to the items on the wall.\nAfter you have five items on the wall, hand the next one to one of the team members, and have them repeat the same process you’ve been doing. However, since they’re a member of the team doing the estimating, they can propose placement and have the team accept it, or argue them into a different placement. Have each member do this until you’ve gone through the team twice (or run out of items). (Remind them they can move other items to make more space, if necessary).\nIf any of the initial items are left, ask the team to decide if they want to continue one at a time or have the team all individually place a few at once, then examine where everyone had placed things. Follow the team decision and get out of the way as they finish the first phase.\nAffinity Grouping At this point you should have a rough line of representative items from smallest to biggest. There might couple put in columns as the same size; if only a couple, don’t sweat it. If more than a handful, ask the team to double-check each other that they are, in fact, the same size.\nThe goal now is to group the ordered stories by those roughly the same size. Go to a middle item and say it’s the reference. Move from that item to the bigger ones, asking if each item along the way is significantly bigger than the reference item (roughly half-again to twice as big). Once you’ve found the item most of the team says is significantly bigger, remove the previous item and put it below the one prior, leaving a gap in the line. Go back to the reference item and start going smaller, asking on each item which one is significantly smaller than the reference item (1/2 - 2/3 the work). One you find that end, repeat the process of making a gap. Don’t spend more than a minute going in either direction.\nYou now have one affinity group. Reinforce to the team that all items in this group are roughly the same size, and even though the difference from the smallest to the largest in that group might be large, this will help give you categories for the rest of the exercise.\nAsk the team to repeat the process on the rest of the ungrouped items, leaving gaps between the different groups. You’ll ideally end up with 5 or more groups, though depending on the size disparity of your initial items it may be many more than that.\nBefore continuing, have the team double-check the groups to see if there are any holes where affinity groups should be — that is, spots where one group represents 3 or more times the size of the group beside it. If so, use a sticky to put a placeholder for a group there.\nMass Estimation If you have more than 30 items to estimate, spread the remaining items among the team. Ask them to start with the simplest and/or biggest ones in their hand and one at a time, take turns doing the following:\nMove one item on the wall from it’s existing group up or down one group, explaining to the group why. Tell the group the item they are placing Place that item in one of the affinity groups This should take no more than 30 seconds per turn, and the simplest ones much less — maybe 10 seconds once the team is in the flow of it. (That would estimate each 100 items in between 15 and 45 minutes). If other team members want to argue about either a card moved or placed, remind them they have the chance to move a card on their turn to address the complaint.\nIf a given card is contentious (moves back and forth between two groups more than 3 times), take it off the wall, explaining that it will be put back at the end of this activity with more discussion. At the end, return those cards with the team voting on where it goes; lean toward the higher group unless the strong majority of the team votes lower, reminding them if necessary that the estimate only has to be approximate. (Note: I’ve done variants of this exercise many times with a handful of different teams and never actually had this happen.)\nGoing Smaller Teams seem to do best when the items in their sprint are sized no more than 1/6 or 1/8 the overall team velocity. Before moving on to pointing, we want to make sure that the things we are pointing are scaled appropriately so that the resulting team velocity is above, say, 5 at least. So we need to double-check the smallest items before assigning a scale.\nBring the team to the smallest group and have them look it over. Ask if they could complete more than one of those items (or items like them) in a sprint. If so, ask them to do a quick hand vote on how many they think the team could complete in a sprint, with a fist representing none and an open hand meaning five or more.\nYou’ll want to see a lot of open hands. If the majority of the team thinks five or more items would be done in a sprint, skip the rest of this section and move on to pointing.\nAsk the team to choose one or two of the work items that would be easy to split into pieces, and have them write those pieces down on stickies. Put those stickies on the wall (or the next wall) in affinity groups like the bigger stories. They should generally be smaller. Repeat this whole section if necessary (though I’ve never had to repeat it).\nPointing Now comes the simplest part of the day. Starting at the smallest affinity group, and moving to the largest, assign points in the progression of your choice. Some choose to double with each column, while I prefer the modified fibonacci sequence commonly used (1, 2, 3, 5, 8, 13, 20, 40, 100). If the team was really confident of getting a lot of the smallest group done, I might start with 1/2 instead of 1. Go as large as you have to — you want to wrap your head around the entire body of work, and if there are any items above 20, they’ll probably need broken into smaller parts anyway.\nGet your first cut at the overall estimate by counting the cards in each group and multiplying by that column’s point value. Note that you’ll want to apply a margin of safety to the estimate — either now, or on the team’s velocity when you use it to estimate the features that can be done by the target date.\nWrap-up It never hurts to thank the participants, or remind them that this is just a very rough cut at the estimates — the expectation is that the team will refine them as necessary when they dig into the work.\nIf you use a separate tracking system (JIRA, etc) you’ll want to enter the information into it. Depending on how many items were used for estimation, I might stack the grouped items together with a sticky indicating their size and enter them later.\nModifications for Existing Teams The overall process for existing teams that have been doing estimation is mostly the same, right up until Going Smaller and Pointing — with the exception that teams that have done this process a couple of times need less explanation, and are able to move through it faster than teams who haven’t. If teams have an established point scale and aren’t looking to modify it, you can skip Going Smaller and have them estimate one of the items in one of the groups the way they usually do. Use the estimated value for that affinity group, and then point the rest of the columns based on the column with the item the team estimated.\nLooking Forward The PO or business people are probably going to want to know the relative estimate for each feature so that they can prioritize appropriately. Get this done before the team needs to start working on the project, so they know what’s most important to start with.\nOnce you have a team velocity (after a sprint for teams that haven’t estimated before, or using a historical average for teams who have) you can apply that to make a rough projection based on the order of features to determine when those features are likely to be done. Remember to apply a margin of safety. (For brand new teams I’d tend toward only expecting 2/3 of the first sprint’s velocity until proven otherwise.) I’m a fan of forthrightness on this — say which features are quite likely to be done, which are iffy, and which (if any) almost certainly won’t be done. Remind the businesspeople that this is (of course) subject to change if they want to drop less important features or parts of the features, or if the team discovers something major that they didn’t previously know. Then keep everyone updated as things change.\nBecause things will change.\nThis post originally appeared on management-kaizen.com\n","description":"","tags":["affinity","coaching","estimating","facilitating","ported"],"title":"Affinity Estimation for Bootstrapping Teams or Projects","uri":"/posts/affinity_estimation/"},{"categories":["Management Kaizen"],"content":"A common type of underdog story in professional sports is that of the athlete who wasn’t recognized at one point, kept trying, and went on to perform well. One specific example is Kurt Warner.\nA brief summary of his NFL career:\nUndrafted by any NFL team in 1994 “Fired” from two different teams (Green Bay Packers under Mike Holmgren in 1994, St. Louis Rams under Mike Martz in 2003) Replaced absent injury on at least two different teams (New York Giants under Tom Coughlin in 2004, Arizona Cardinals under Dennis Green in 2005-2006) Won the NFL MVP award multiple times (In St. Louis, under Dick Vermeil in 1999 and under Mike Martz in 2001) Led two different teams to 3 Super Bowls (In St. Louis in 1999 [Dick Vermeil] and 2001 [Mike Martz], and in Arizona in 2008 under Ken Whisenhunt) Is Kurt Warner a Good Player? What can we learn from this (and many other) examples? Besides that assessments are fuzzy and hard?\nWas Kurt Warner a good player or a mediocre one? He was effectively fired twice (Green Bay and St. Louis), but he also won MVP awards and Super Bowls, and was elected to the NFL Hall of Fame.\nDid he play for bad coaches? Mike Holmgren and Tom Coughlin have won Super Bowls and coached quarterbacks who have had notable success, including Brett Farve and Eli Manning.\nOr is it more complicated than that?\nSystems at Play You’ll frequently hear people refer to one coach or another’s system, and that can have a lot to do with the results a given player has in sports. A clock-control system is going to want to have different players than one that emphasizes fast-breaks. Some coaches stress defense more, while some stress offense. And sometimes a player is just in the wrong role in a system that would allow them to thrive — in the NFL, for example, you’ll frequently see cornerbacks move to safety or vice-versa; likewise many field positions in baseball (particularly outfielders).\nIf you look around, you might also see the same effect in a workplace. A software developer who excels in one company may struggle if they change to another company — or even another team in the same company. Different processes, different roles, different goals… even different skills by teammates can amplify or reduce a given person’s effectiveness at their job.\nDoes that mean they are bad? Or incompetent?\nNobody’s At Fault Some sources claim as much as 95% of the performance of individuals is dictated by the system they are in. Others rightly point out that in situations with less repeatability between jobs (such as software development), this is unlikely to be as high. What still holds true at a first-approximation is that the system someone works in can greatly influence how well they perform — and much of Deming’s work focuses on things that will prevent people (and companies) from performing up to their potential.\nMany people argue against ever calling someone incompetent, as opposed to the more specific “unable to perform as needed in this environment”.\nTake the Pioneers, Settlers, and Town Planners model. Which one applies to your team? To your employees? Right now the work my teams are doing is primarily Settler-type work, with some Pioneering and a smattering of Town Planning. How will the effectiveness of a great Town Planner be in such a system? In a team full of Pioneers? Depending on the person, they might interact with the Pioneers on the team and contribute just enough planning to help… or they might grow frustrated at the lack of fore-planning and standardization that the team exhibits, leading to acrimony?\nSometimes a Change is Necessary I want to see people kicking butt in their jobs… it’s something that delights me. If someone reporting to me is struggling to reach their potential, I want to dig in and see what parts of the system are blocking them. Sometimes we can change the system… more unit tests around a subsystem, for example, or change some IDE settings to work better for that person. Sometimes, we can’t: no matter how much I might like to, we’re not going to be able to rearchitect our multi-million LoC application, or change the programming language we use on it, in any timeframe less than years.\nWhen that happens? The best I can do is to help the person realize it and find someplace that better fits — in another company, if necessary. It’s temporarily difficult, but better to have someone placed where they can excel (and another with potential in their position) than someone constantly stymied in their mastery.\nThis post originally appeared on management-kaizen.com\n","description":"","tags":["coaching","models","systems","ported"],"title":"How Kurt Warner’s Career Relates to Software Developer’s Performance: Players, Coaches, and Systems","uri":"/posts/warner_careers_systems/"},{"categories":["Management Kaizen"],"content":"One of your reports did something good. Or bad. Or maybe not a report, but a peer. Or someone else in the organization. Or you want to prompt someone for feedback. But – and here’s the problem – lots of people are bad at feedback. Feedback is a gift, but many don’t give it for not knowing how to wrap.\nFeedback is hard It’s also vital. One of the biggest components of growth – individual and team – is incorporating feedback, which relies on getting feedback. People get better at what they are doing through feedback, and teams cannot become high-performing without the ability to give each other feedback on what is happening.\nMake it easier You can read about the conditions necessary to continue to get feedback, but while the article addresses making feedback easy to give by not fighting it or arguing against it, there are other ways to make feedback easier to give. One way is to provide a framework for how to phrase the feedback. This frees the person providing the feedback to concentrate on getting the content correct.\nThere are many feedback models out there, including the first parts of having non-violent, tough, or fierce conversations. However, one of the simplest, and therefore easiest to teach, is the SBI model.\nThe Situation, Behavior, Impact model The model states that you start with the situation in which another person did something, move to what behavior they showed, and then state the impact of that behavior in that situation.\nThe Situation This sets the scene for the other things that happened, providing context to mark a particular instance of behavior.\nThe Behavior One person (or a team — but be careful, that’s a bit harder for learning the framework) does one or more actions in the situation being described.\nThe Impact As a result of the action(s) taken, something happened.\nThe Pitfalls This model can go wrong — drastically wrong. One of the biggest pitfalls is providing interpretations, especially implicit interpretations, and extra-especially during the situation or behavior part of the feedback. The situation should be described in as neutral terminology as possible. The ideal is shown below — like a scene being set in a movie. This part should describe the when, where, and who, in a way that is unlikely to have any observer object. It should describe a singular situation. Good: During the lunch meeting with clients yesterday. Bad: During team meetings, or Whenever the boss isn’t present.\nThe behavior should also be in neutral terms — also like a scene in a movie, only now the scene is in focus and people are doing things. This is the how or what of the event, and should also be described in a way that is unlikely to have any observer or participant object. In particular, it should be phrased so that the recipient of the feedback is unlikely to object. Good: You started talking while I was in the middle of my sentence, or you told a joke referring to blondes, or you added extra data to reinforce my point. Bad: You were surly (this isn’t specific), or you interrupted me (interruption implies intent, and has negative connotations), or you told a sexist joke (this inserts your judgement on the behavior, instead of just describing the behavior).\nThe behavior part is where this model most frequently goes wrong, and it’s usually due to problems similar to those noted above: things that are open to interpretation or can be argued against. It’s also more important to get this right, because if the person receiving the feedback disagrees with this, they won’t accept the rest of the feedback (since in their mind it’s no longer connected to their behavior).\nFinally, the impact doesn’t have to be in neutral terms — but only if you’re describing the impact to you personally. Impacts on other people should still be as neutral as possible, and in all cases, the goal of stating things that the recipient is unlikely to argue or object to is still important. (The reason personal impacts don’t have to be neutral is because an individual is the authoritative source on what they felt). Good: I lost my momentum in the presentation, or I felt like my words weren’t good enough, or I saw Tim wince and then didn’t say anything for the rest of the meeting, or the clients stopped objecting to that part of the proposal. Bad: the client didn’t like it, or you come off as rude, or team members think you’re sexist (acceptable modification: 2 team members called you sexist when talking to me after the meeting — this is theoretically independently verifiable and difficult for someone to argue against).\nPutting the pieces together It takes a bit of practice to make these parts flow smoothly, but even knowing about them and phrasing things in a slightly awkward way allow for the delivery of feedback, which is the most important goal. Once feedback is flowing, and people start accepting it, you can even recurse and start delivering feedback on how the other person delivers (or accepts) feedback.\nAnd the more feedback you get, the more you’ll be able to choose effective ways to improve.\nWhen I publish a post, and you respond or share it, I feel like my work is appreciated and I’m more likely to write more articles like it. 😉\nCaleb\nThis post originally appeared on management-kaizen.com\n","description":"","tags":["behavior","feedback","impact","sbi","situation","ported"],"title":"When I Tell a Joke, and You Laugh, I’m More Likely to Joke: The Situation-Behavior-Impact Model of Feedback","uri":"/posts/joke_sbi/"},{"categories":["Management Kaizen"],"content":"“How can I measure my employees for evaluation?” new managers commonly ask.\nIt’s the wrong question. Not because evaluating and providing feedback to employees is wrong — frequent and consistent feedback is one of the keys to helping people grow. No, it’s wrong because it implies that measuring is the goal, and it’s not.\nAn assessment — “This is how Sam is performing” — is what is actually desired.\nAssessments vs Measurements There are many things that can be measured, but there are few occupations that can be summarized by a measurement — perhaps some bricklayers can be evaluated by the number of bricks laid, for exampled, but you’d probably want to take into consideration how well those bricks are laid, and perhaps if the bricklayer made a pleasing pattern from the bricks. Most jobs I know suffer from that same problem — there might be some jobs out there that can boil out a single number, but even that is hard. Even baseball players after Moneyball are evaluated on a set of numbers — including the salary they are asking, and an assessment is made on balance for whether the person is worth it.\nIn short, a measurement is a number, while an assessment is a judgement made from looking at more of the situation than just a number (though, ideally, some numbers come into play).\nHow then are assessments made, you helpfully ask.\nForming Assessments At the base, there is reality.\nUnfortunately, we can’t just consult reality and get a clear-cut answer whenever we need to make an assessment, so we’re left with making assessments on incomplete or inaccurate information.\nHow do you get from reality to an assessment? A Framework for Assessments First, nobody can encompass the totality of reality as it is. Instead, I and everyone else start by making observations of contain pieces of reality (in the best case) or of something we think is reality (in the unfortunately common case).\nObservations include things like “the sun is shining right now where I am” or “the weatherman predicted rain”. Things similar to what you might see or hear with a recording (or — if we had the recording equipment to convey it — smell, feel, or taste). It does not include “the weatherman is wrong” — that’s an assessment, which comes later.\nGenerally speaking, observations tend to fall into one of two categories — quantifiable data or anecdotal occurrences. I call these two categories Measures and Stories.\nMeasures are things that can have a number put to them, while stories generally can’t. In the weather example, “the sun is shining right now where I am” is a story, but “my rain gauge shows zero accumulation for today” is a measurement. Likewise, “the weatherman predicted rain” is a story, while “the weatherman predicted rain for 25% of the covered area” might be a measurement — it’s a blurry line between the two.\nMany people consider Measures to be objective and stories to be subjective — though that distinction isn’t as clear cut as those people might think.\nThe fact that other assessments have been made are also observations, which can be categorized into stories (usually) or measures (when considered as a group, such as the number of people surveyed who assessed the weatherman as “generally accurate”).\nGiven stories and measures, people form assessments.\nIn the ideal case, the appropriate stories and measures will be selected and weighed to form an assessment. In the all-too-common case, people form a “snap judgement” with what they have available, whether or not it’s appropriate to the assessment being made.\nIt’s… Complicated So, here we have a full view of how we make an assessment, right? Well, not quite. In reality, it’s more like this:\nIn the interests of clarity, I model biases as an input to the assessment rather than obscuring the entire diagram — but make no mistake, there is bias in everything from what and how we observe through how the observations are categorized, what observations should be used, or the weight they are given in the assessment.\nIt gets messy – but wait! There’s more!\nNot only are biases at play, but assessments recurse — the assessments themselves (as well as observations and biases) are naturally incorporated into reality, where they form the basis for other assessments. Remember the survey for if the weatherman is “generally accurate”? Each of the answers to that survey was an assessment, which were then observed, collated, and measured. Assessments can be stories others tell, or even stories you tell yourself that feed into another assessment.\nUsing the Model So how does a manager evaluate their employee? Using this model, I’d suggest (and have done for myself) making a list of the 3-10 things that are most important for the position, and measuring or assessing those — recursing a couple of levels if necessary. Additionally, list the biases you know and spend some time thinking how you might counter them.\nFor example, if evaluating a software developer, I might concentrate on individual productivity, team contributions, and company values for an assessment.\nIndividual productivity is another assessment that might be judged by a set of the following: number and impact of code contributions, number and impact of tasks or features delivered, or contributions to improving architecture, reducing technical debt, or streamlining processes.\nTeam contributions might include helping or mentoring others, participating in team meetings, occasionally volunteering for the disliked tasks, or studying facilitation, coaching, or processes in order to help the team grow.\nMost companies will have values they espouse. I’d look at them for expected behaviors of a software dev that would exhibit those values, and look for those actions in the employee. Alternately, look at the employee’s most common or typical actions and see how well they align to the company’s values.\nFor each of the above, I might ask coworkers to provide their input as well.\nFinally, my list of biases might include that I prefer working with people who exhibit high autonomy, I might be pre-inclined one way or another due to input from others, and I prefer and value team work over individual work — in addition to all the usual implicit (hopefully not explicit) biases people might have around gender, race, age, or a number of other protected categories. In order to counter these, I would attempt to compare any measurements I make against a sample of other developers to avoid weighting the measures one direction or another, and perhaps make a list of the measures and stories and run that list without identifying information by another supervisor or two in order to check myself.\nFinally, I’d remind myself that assessments are fuzzy by their nature, and I’m liable to be wrong. That helps me keep an open mind for more ideas and observations that the employee may bring up, as well as those from others sources.\nThe details will obviously be adapted to your unique situation, so give it a shot and let me know how it goes.\nThis post originally appeared on management-kaizen.com\n","description":"","tags":["models","ported"],"title":"Making Assessments","uri":"/posts/making_assessments/"},{"categories":["Management Kaizen"],"content":"There are a number of reasons to not call devs by terms they dislike, but let’s start with the first: they don’t like it. If you care about your team members, that should be enough in itself. And just in case it isn’t, developers are in demand right now, so at the small cost of changing a bit of your vocabulary, you can help keep one from leaving when the cost of replacing a developer is potentially so high.\nOne of my devs got upset when they heard me refer to the team as resources. Why? What should I say instead?\nThese are bad ideas Resources This is the classic case, and one that devs resent the most. It screams of both dehumanizing people into interchangeable parts, and of the worst sort of business jargon. At best, the resource is the developer’s time, of which anyone has only a finite amount.\nHeads (or bodies) Nearly as bad as resources, this is a basically dehumanizing way to refer to people, treating them as interchangeable parts.\nReports Some don’t find this problematic, but to some it reeks of grade school and being overseen (developers value their autonomy).\nGuys In some parts of the English speaking world, people (mostly men) consider this a gender-neutral term. I’ve heard differing opinions, and besides that, it’s far from universal, so you risk alienating many of the people you are supposed to be working with.\nMy [resources|heads|bodies|reports|guys] Adding “my” to the beginning of any of these terms implies possession, which makes it worse for those who already dislike the terms.\nMinions Just… don’t.\nBetter Substitutes It’s hard to stop using certain terms without good substitutes, however, so here are some alternatives you can try using:\nStaff This seems to be an older term, as far as tech goes, which means most devs are probably neutral on it… and in the end, it basically means people who are being managed by you, which is accurate.\nEmployees Similar to staff, though more straightforward. As a statement of fact, it’s hard to argue against, but the alternatives below are better.\nDevelopers (or appropriate role) It’s what they do, and what they are being paid to do. You might find a couple who argue they do something different (software crafter, perhaps?) but this directly references the value they provide to the business.\nTeam (or team members, or team name) Explicitly referring to the teams that exist is probably the best option when you have to be explicit about exactly who is going to be involved.\nWe Perhaps even better than referring to a team, because you’re including yourself in the effort.\nOf course, it’s easy to say you want to change how you talk, and harder to actually do so. You can start by letting your team members know that you intend to try, and ask them to call you out on failures. If you want or need to go a step further, there’s always the classic money jar technique, and some places have hooked up slackbot auto-responses to help them learn to moderate their language.\n","description":"","tags":["communication","employees","resources","staff","terminology","ported"],"title":"Should I Not Refer to My Team As Resources?","uri":"/posts/people_resources/"},{"categories":["Management Kaizen"],"content":"At one point, you were probably pretty good at slinging code. But once you got into people management – the hiring and firing, the performance and salaries and reviews and career plans, the team and project coordination, and everything else that goes with it – you realized that it takes up a huge amount of time.\nMuch of this work involves meetings, which slice up the time you do have – the classic case of Maker’s Time vs. Manager’s Time. There’s a reason it was labeled Manager’s Time, and you’re now in it.\nBut you don’t want to lose your technical chops.\nThe good news is, you don’t have to give up coding completely. (If you like to code, I’d actually suggest you don’t give it up, even if it’s just side projects.)\nFirst of all, you can’t put yourself in the critical code path for delivery – your job now is different. Per Murphy, you’ll be called to fire-fight elsewhere right when the delivery of the ticket you took is most necessary.\nBut! All is not lost. Even at work, there are ways you can contribute, and beneficial reasons to do so.\nThe main answer is in the restrictions… you can’t pull a JIRA ticket that’s in the critical path, but there are always tickets hanging around that aren’t.\nYou can resolve technical debt by\nAdding a test\nRefactor a piece of code\nFixing a defect (especially one of those nagging, lower-priority bugs)\nYou can help your team learn by\nPairing with junior devs\nDo an exploratory spike of code for an upcoming project\nTrial a different tool, or an upgrade\nAnd finally, you can do some kaizen by\nMeasure app performance and optimize a slow spot\nWrite a helper script for the dev process\nWrite a helper script for you to gather metrics or data points\nOne last consideration: remember the Manager’s Time. Choose something that can be done in bits and pieces, between other tasks. This usually means something simpler than you’re used to, or at least something without large context to reacquire. (Using TDD and small commits can really help with this.)\nP.S. The options listed here can all help improve your team’s ability to deliver code over time as well – one of the things you should be working on as a manager. Just don’t do so to the neglect of anything else.\nThis post originally appeared on management-kaizen.com\n","description":"","tags":["coding","junior devs","manager time","pairing","refactoring","tdd","ported"],"title":"As a Manager, How Can I Keep Up My Coding Chops?","uri":"/posts/manager_keep_coding/"},{"categories":["Management Kaizen"],"content":"You have a few junior devs you’re trying to keep productive, but you don’t want to spoon-feed them answers. It’s better over the long term if they learn and figure it out themselves. Your boss might even have told you not avoid spoon-fed answers, but they also expect productivity out of the team.\nYou may recall having a hard time getting answers yourself when you started as a junior developer.\nThe Socratic method – answering all their questions with one of your own designed to make them think of the answer themselves – can be beneficial in small doses, but it’s pretty easy to come off as an asshole if you’re constantly replying with Socratic questions, so you need to dry the line somewhere. It’s also hard to figure out the best questions on the fly.\nSomeone might have suggested you read The Coaching Habit, but it’s hard to find the time to read all the books you’re supposed to – especially when you’re constantly interrupted with questions.\nOf course, if it’s something trivial, it’s not really worth it trying to force a learning experience. If you now the answer is on StackOverflow or elsewhere, ask them to search for their answer, and otherwise answer it yourself. (If a junior dev continues to bring trivial questions your way, start insisting they also bring the results from the searches they’ve already tried.)\nIf it’s not trivial, here’s a routine set of questions you can go through that should get junior developers starting to become more self-reliant, without sounding like an asshole.\nCan They Clearly Describe the Problem? The first thing to do is to make sure they can explain the problem they are having clearly. If they can’t do this, then they don’t really understand what they’re trying to solve. Ask clarifying questions – this both helps make sure you truly understand the problem they are having, and gets them thinking along those lines. Frequently, this will be enough to solve the problem. Congratulations, you’re a highly skilled rubber duck.\nHave They Done an Internet Search? If they still don’t know what to do next after clearly describing their problem, ask what searches they’ve already done to find answers. This lets you double-check their understanding of the problem. If they haven’t yet done so, ask them to see what they can find for themselves, and come get you again in 10 minutes if the problem persists. (You may choose to stick around helping them search the first time or two, but don’t make a habit of it – you want them to become increasingly self-reliant for the first few steps, and that means searching without you to help). After a few times of consistently asking this question, they’ll start to do this step before bringing the problem to you, solving some more problems before you need to intervene. Congratulations, they’re already doing more on their own, which means you’re spoonfeeding them less.\nWhat Have They Tried? Ask them what they’ve alredy tried. This is an important step – how often have you worked with a complete newb and watched them ask for help without trying anything themselves? Don’t let this habit continue; instead, insist that they try something on their own to solve them problem before you get involved. The first few times they haven’t done any, you should ask what they can think of to try, and either encourage them to follow the first effort if you think it’s a good one, or reprioritize their first efforts based on your own knowledge and ideas of what needs to be done. Either way, have them try at least two things and get back to you if they still can’t figure it out. If they’ve already tried at least two things, and they appear to be near the solution, here’s where your judgement comes into play. You can either give them a concrete direction to solve the problem now, or move on to the last step. If you do reprioritize their efforts or give them the next step to try, be sure to explain at least one level of the thinking behind your response, so they know more for next time.\nThis set of responses should eventually get the most junior of developers to more self-reliant for the initial stages of fixing problems. If there’s a problem that makes it through this gauntlet of questions, it’s time to settle in for some dedicated learning – whiteboarding, pair programming, or whatever is appropriate in your situation. But have heart – most of the annoying requests for help will be handled by the previous questions, so by the time this is a regular thing, the juniors will be primed for learning, and won’t stay junior for long.\nThis post originally appeared on management-kaizen.com\n","description":"","tags":["coaching","junior devs","ported"],"title":"How Should I Respond When a Junior Developer Asks For Help?","uri":"/posts/junior_asks_for_help/"}]

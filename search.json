[{"categories":null,"content":"I’ve told a few people this story, but in the 2000s I started a new job for a company that had reworked a lot of their software development process a couple years earlier, after a disastrous software release. A lot of that process ended up being much heavier and inflexible than necessary — another story for another day — but one thing in particular stands out to me: the code review process.\nMore specifically, one quirk of the code review process.\nWhen the developers were faced with the need for process, they did what most people might… they looked around and adopted from well-regarded companies1. That company was IBM.\nLike many things you might expect from IBM, the process was formal and detailed. The code reviews involved 4 or more people, all with their own roles — author, moderator, reader, and reviewer. These people were supposed to gather in a meeting room with a printed copy of the code diffs and proceed through the rest of the formal review process.\nI’m already imaging readers wincing, but there’s one detail forever ingrained in my memory: the process specified the code review was to happen before the developer compiled their code, or ran it.\nLet that sink in a bit: rather than have one developer run an (at the time) 2-15 minute compile, the process said 4 software developers should sit in a room for a minimum of 30 minutes (and usually an hour or more2). In what world does that even make sense?\nBear in mind this process came from IBM (though I’m not convinced they still used it at the time). It was published by senior developers at the company… ones who had decades of experience. And there is one of the keys — the process came from experience decades old. From a company known for their mainframe computers.\nAt one time, computing resources were scarce. People had to schedule time to have their program run (perhaps even loading it via punch cards), and if something went wrong during that time, they either fixed it during their time slot or waited for another time slot (days or weeks later) to try again.\nIn that sort of environment, the costs of a bug could mean the loss of a week or more, and the cycle time to test and adapt the code equally long. Those costs meant that spending 10 or even 20 collective developer-hours reviewing the code might still cost less than one mistake. In that environment, doing a code review prior to compile or run absolutely made sense.\nThen circumstances changed. PCs proliferated. Soon enough you had a computer on most developer’s desks that was waiting around twiddling its virtual thumbs looking for something to do.\nThus, what once made complete sense now seems nonsensical. But processes and habits took longer to catch up3 — even for a group of people who generally all disliked the heavyweight code review process as it was.\nI was reminded of this when reading Cory Doctorow’s book review of How Infrastructure Works by Deb Chachra, which turned my perception of the constraints between manufacturing and energy usage on its head:\nWe’ve spent millennia treating energy as scarce, despite the fact that fresh supplies of it arrive on Earth with every sunrise and every moonrise. Moreover, we’ve spent that same period treating materials as infinite despite the fact that we’ve got precisely one Earth’s worth of stuff […]\nChachra proposes that we could – we must – treat material as scarce, and that one way to do this is to recognize that energy is not. We can trade energy for material, opting for more energy intensive manufacturing processes that make materials easier to recover when the good reaches its end of life. We can also opt for energy intensive material recovery processes.\nWe aren’t there yet — right now the majority of our energy still derives from materials pulled out of the ground — but we could be there soon. From the same article, our current total energy needs use less than 1% of the solar energy that reaches the earth. Once we have enough renewable energy to cover our existing needs, things that once looked nonsensical may suddenly make a lot of sense. Like spending a lot more energy recycling material back into usable forms.\nThis idea genuinely delights me, and I can’t wait to see how things might adapt when we get there.\nA method full of pitfalls — also a topic for another day ↩︎\nSince the process was so heavyweight, reviews grew large so developers could (supposedly) minimize their time involved with it. ↩︎\nThere was an exception for a “desktop review” with only one other person, for minor changes. I (and a couple others) latched onto that and made most of our changes minor (a good habit anyway), and the practice spread, and eventually nobody was doing the full review part of the process. Then I was able to get that part of the process removed, since we weren’t even doing it. ↩︎\n","description":"","tags":null,"title":"Changing Circumstances: Code Reviews and Energy Abundance","uri":"/posts/changing_circumstances_code_reviews_and_energy_abundance/"},{"categories":["Recommendations"],"content":"I don’t remember when I started reading Schlock Mercenary1, but it was at least ten years ago. That’s a pretty solid quarter of the part of my life I can remember (which is an odd idea in itself, that a decade could only cover that much time).\nFor well before I started reading and most of the past decade, Howard Tayler ensured a daily dose of Schlock Mercenary, for free, on the website. Every day. Weekends included. The entire run of Schlock Mercenary ran for over 20 years2, and I don’t know if there was ever a missed day. Every day, at least one strip, at least one punchline, and advancing the overall story3. Besides the joy, that consistent hit of a small bit of dopamine was its own reassurance that some things were and are still right in the world.\nTayler and his team are now running a kickstarter for a print run of Mandatory Failure, the 18th of 20 books in the strip. It’s standalone in that you can read it and understand what’s going on… or, you could read the archives or pick up some of the previous books in their store or as add-ons once the campaign ends. They’ve run multiple campaigns before (which I’ve backed) and successfully delivered results, over and over. It’s not something every Kickstarter campaign can claim.\nI recommend you become a backer — and not just because more backers may eventually mean more goodies I can purchase, but because it’s a good story and will probably provide you with some hours of amusement and entertainment, like it did for me.\nThe author-recommended starting point is Book 10: The Longshoreman of the Apocalypse ↩︎\nIf I think my following the strip for 10 years is an endeavor, what must 20 years of producing it have been like? The mind boggles. ↩︎\nAs I recall, there were a couple small diversions in Octobers, but those were still story, and still with the characters I showed up to read about. ↩︎\n","description":"","tags":["schlock","kickstarter"],"title":"Kickstarter for Schlock Mercenary: Mandatory Failure","uri":"/posts/mandatory_failure/"}]
